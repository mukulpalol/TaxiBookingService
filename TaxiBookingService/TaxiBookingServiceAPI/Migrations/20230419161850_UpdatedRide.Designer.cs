// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaxiBookingService.DAL;

#nullable disable

namespace TaxiBookingService.Host.Migrations
{
    [DbContext(typeof(TbsDbContext))]
    [Migration("20230419161850_UpdatedRide")]
    partial class UpdatedRide
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("TaxiBookingService.DAL.Models.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Areas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 3,
                            Deleted = false,
                            Name = "Vidhyadhar Nagar"
                        },
                        new
                        {
                            Id = 2,
                            CityId = 3,
                            Deleted = false,
                            Name = "Sirsi Road"
                        },
                        new
                        {
                            Id = 3,
                            CityId = 3,
                            Deleted = false,
                            Name = "Jagatpura"
                        },
                        new
                        {
                            Id = 4,
                            CityId = 4,
                            Deleted = false,
                            Name = "Pratap Nagar"
                        },
                        new
                        {
                            Id = 5,
                            CityId = 4,
                            Deleted = false,
                            Name = "Ganpati Nagar"
                        });
                });

            modelBuilder.Entity("TaxiBookingService.DAL.Models.CancelReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CancelReasons")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("ValidReason")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("CancelReasons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CancelReasons = "Driver denied duty",
                            Deleted = false,
                            ValidReason = true
                        },
                        new
                        {
                            Id = 2,
                            CancelReasons = "Entered wrong drop location",
                            Deleted = false,
                            ValidReason = true
                        },
                        new
                        {
                            Id = 3,
                            CancelReasons = "Driver arrived too early",
                            Deleted = false,
                            ValidReason = false
                        },
                        new
                        {
                            Id = 4,
                            CancelReasons = "Change of plans",
                            Deleted = false,
                            ValidReason = false
                        });
                });

            modelBuilder.Entity("TaxiBookingService.DAL.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Deleted = false,
                            Name = "Bangalore",
                            StateId = 1
                        },
                        new
                        {
                            Id = 2,
                            Deleted = false,
                            Name = "Mumbai",
                            StateId = 2
                        },
                        new
                        {
                            Id = 3,
                            Deleted = false,
                            Name = "Jaipur",
                            StateId = 4
                        },
                        new
                        {
                            Id = 4,
                            Deleted = false,
                            Name = "Udaipur",
                            StateId = 4
                        },
                        new
                        {
                            Id = 5,
                            Deleted = false,
                            Name = "Puducherry",
                            StateId = 3
                        });
                });

            modelBuilder.Entity("TaxiBookingService.DAL.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("AmountDue")
                        .HasColumnType("money");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(2,1)");

                    b.Property<int>("TotalRides")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("TaxiBookingService.DAL.Models.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Available")
                        .HasColumnType("bit");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("DrivingLicenseNumber")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(2,1)");

                    b.Property<int>("TotalRides")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("TaxiBookingService.DAL.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(8,6)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(9,6)");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AreaId = 1,
                            Deleted = false,
                            Latitude = 26.955022m,
                            Longitude = 75.773914m,
                            StreetName = "39 Sector 2 Road"
                        },
                        new
                        {
                            Id = 2,
                            AreaId = 2,
                            Deleted = false,
                            Latitude = 26.927076m,
                            Longitude = 75.702112m,
                            StreetName = "RIICO Industrial Area"
                        },
                        new
                        {
                            Id = 3,
                            AreaId = 3,
                            Deleted = false,
                            Latitude = 26.822239m,
                            Longitude = 75.864820m,
                            StreetName = "Ram Nagariya Road"
                        },
                        new
                        {
                            Id = 4,
                            AreaId = 1,
                            Deleted = false,
                            Latitude = 26.967003m,
                            Longitude = 75.782395m,
                            StreetName = "B4 Central Spine Road"
                        },
                        new
                        {
                            Id = 5,
                            AreaId = 2,
                            Deleted = false,
                            Latitude = 26.924471m,
                            Longitude = 75.697313m,
                            StreetName = "6 Dhaka Nagar"
                        });
                });

            modelBuilder.Entity("TaxiBookingService.DAL.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<DateTime>("PaymentTimeStamp")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("TaxiBookingService.DAL.Models.Ride", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal?>("Amount")
                        .HasColumnType("money");

                    b.Property<int?>("CancelReasonId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<decimal?>("CustomerRating")
                        .HasColumnType("decimal(2,1)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Distance")
                        .HasColumnType("decimal(5,1)");

                    b.Property<int?>("DriverId")
                        .HasColumnType("int");

                    b.Property<decimal?>("DriverRating")
                        .HasColumnType("decimal(2,1)");

                    b.Property<int>("DropId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DropTime")
                        .HasColumnType("datetime");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("time");

                    b.Property<DateTime?>("EstimatedDropTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EstimatedPickUpTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("int");

                    b.Property<int>("PickUpId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PickUpTime")
                        .HasColumnType("datetime");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CancelReasonId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DriverId");

                    b.HasIndex("DropId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("PickUpId");

                    b.HasIndex("StatusId");

                    b.ToTable("Rides");
                });

            modelBuilder.Entity("TaxiBookingService.DAL.Models.RidesDeclined", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<int>("RideId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("RideId");

                    b.ToTable("RidesDeclined");
                });

            modelBuilder.Entity("TaxiBookingService.DAL.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("RoleType")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Deleted = false,
                            RoleType = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Deleted = false,
                            RoleType = "Customer"
                        },
                        new
                        {
                            Id = 3,
                            Deleted = false,
                            RoleType = "Driver"
                        });
                });

            modelBuilder.Entity("TaxiBookingService.DAL.Models.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("SettingName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("Value")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.ToTable("Settings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            SettingName = "CancellationFactor",
                            Value = 0.05m
                        });
                });

            modelBuilder.Entity("TaxiBookingService.DAL.Models.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("States");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Deleted = false,
                            Name = "Karnataka"
                        },
                        new
                        {
                            Id = 2,
                            Deleted = false,
                            Name = "Maharashtra"
                        },
                        new
                        {
                            Id = 3,
                            Deleted = false,
                            Name = "Puducherry"
                        },
                        new
                        {
                            Id = 4,
                            Deleted = false,
                            Name = "Rajasthan"
                        });
                });

            modelBuilder.Entity("TaxiBookingService.DAL.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("StatusType")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Deleted = false,
                            StatusType = "Searching"
                        },
                        new
                        {
                            Id = 2,
                            Deleted = false,
                            StatusType = "Booked"
                        },
                        new
                        {
                            Id = 3,
                            Deleted = false,
                            StatusType = "Ride Started"
                        },
                        new
                        {
                            Id = 4,
                            Deleted = false,
                            StatusType = "Ride Completed"
                        },
                        new
                        {
                            Id = 5,
                            Deleted = false,
                            StatusType = "Ride Cancelled"
                        },
                        new
                        {
                            Id = 6,
                            Deleted = false,
                            StatusType = "No Drivers Available"
                        });
                });

            modelBuilder.Entity("TaxiBookingService.DAL.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(25)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("varchar(6)");

                    b.Property<string>("LastName")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Deleted = false,
                            Dob = new DateTime(1992, 5, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@example.com",
                            FirstName = "admin",
                            Gender = "male",
                            Password = "password",
                            PhoneNumber = "9000000000",
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("TaxiBookingService.DAL.Models.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("VehicleNumber")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<int>("VehicleTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("TaxiBookingService.DAL.Models.VehicleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AverageSpeed")
                        .HasColumnType("int");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("FareFactor")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(25)");

                    b.HasKey("Id");

                    b.ToTable("VehicleTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AverageSpeed = 30,
                            Capacity = 3,
                            Deleted = false,
                            FareFactor = 17,
                            Type = "Hatchback"
                        },
                        new
                        {
                            Id = 2,
                            AverageSpeed = 40,
                            Capacity = 4,
                            Deleted = false,
                            FareFactor = 19,
                            Type = "Sedan"
                        },
                        new
                        {
                            Id = 3,
                            AverageSpeed = 45,
                            Capacity = 6,
                            Deleted = false,
                            FareFactor = 21,
                            Type = "SUV"
                        });
                });

            modelBuilder.Entity("TaxiBookingService.DAL.Models.Area", b =>
                {
                    b.HasOne("TaxiBookingService.DAL.Models.City", "City")
                        .WithMany("Areas")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("TaxiBookingService.DAL.Models.City", b =>
                {
                    b.HasOne("TaxiBookingService.DAL.Models.State", "State")
                        .WithMany("Cities")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("TaxiBookingService.DAL.Models.Customer", b =>
                {
                    b.HasOne("TaxiBookingService.DAL.Models.User", "User")
                        .WithMany("Customers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaxiBookingService.DAL.Models.Driver", b =>
                {
                    b.HasOne("TaxiBookingService.DAL.Models.Location", "Location")
                        .WithMany("Drivers")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaxiBookingService.DAL.Models.User", "User")
                        .WithMany("Drivers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaxiBookingService.DAL.Models.Vehicle", "Vehicle")
                        .WithMany("Drivers")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("TaxiBookingService.DAL.Models.Location", b =>
                {
                    b.HasOne("TaxiBookingService.DAL.Models.Area", "Area")
                        .WithMany("Locations")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");
                });

            modelBuilder.Entity("TaxiBookingService.DAL.Models.Ride", b =>
                {
                    b.HasOne("TaxiBookingService.DAL.Models.CancelReason", "CancelReason")
                        .WithMany("Rides")
                        .HasForeignKey("CancelReasonId");

                    b.HasOne("TaxiBookingService.DAL.Models.Customer", "Customer")
                        .WithMany("Rides")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaxiBookingService.DAL.Models.Driver", "Driver")
                        .WithMany("Rides")
                        .HasForeignKey("DriverId");

                    b.HasOne("TaxiBookingService.DAL.Models.Location", "Drop")
                        .WithMany("RideDrops")
                        .HasForeignKey("DropId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaxiBookingService.DAL.Models.Payment", "Payment")
                        .WithMany("Rides")
                        .HasForeignKey("PaymentId");

                    b.HasOne("TaxiBookingService.DAL.Models.Location", "PickUp")
                        .WithMany("RidePickUps")
                        .HasForeignKey("PickUpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaxiBookingService.DAL.Models.Status", "Status")
                        .WithMany("Rides")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CancelReason");

                    b.Navigation("Customer");

                    b.Navigation("Driver");

                    b.Navigation("Drop");

                    b.Navigation("Payment");

                    b.Navigation("PickUp");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("TaxiBookingService.DAL.Models.RidesDeclined", b =>
                {
                    b.HasOne("TaxiBookingService.DAL.Models.Driver", "Driver")
                        .WithMany("RidesDeclined")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaxiBookingService.DAL.Models.Ride", "Ride")
                        .WithMany("RidesDeclined")
                        .HasForeignKey("RideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Ride");
                });

            modelBuilder.Entity("TaxiBookingService.DAL.Models.User", b =>
                {
                    b.HasOne("TaxiBookingService.DAL.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("TaxiBookingService.DAL.Models.Vehicle", b =>
                {
                    b.HasOne("TaxiBookingService.DAL.Models.VehicleType", "VehicleType")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("TaxiBookingService.DAL.Models.Area", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("TaxiBookingService.DAL.Models.CancelReason", b =>
                {
                    b.Navigation("Rides");
                });

            modelBuilder.Entity("TaxiBookingService.DAL.Models.City", b =>
                {
                    b.Navigation("Areas");
                });

            modelBuilder.Entity("TaxiBookingService.DAL.Models.Customer", b =>
                {
                    b.Navigation("Rides");
                });

            modelBuilder.Entity("TaxiBookingService.DAL.Models.Driver", b =>
                {
                    b.Navigation("Rides");

                    b.Navigation("RidesDeclined");
                });

            modelBuilder.Entity("TaxiBookingService.DAL.Models.Location", b =>
                {
                    b.Navigation("Drivers");

                    b.Navigation("RideDrops");

                    b.Navigation("RidePickUps");
                });

            modelBuilder.Entity("TaxiBookingService.DAL.Models.Payment", b =>
                {
                    b.Navigation("Rides");
                });

            modelBuilder.Entity("TaxiBookingService.DAL.Models.Ride", b =>
                {
                    b.Navigation("RidesDeclined");
                });

            modelBuilder.Entity("TaxiBookingService.DAL.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("TaxiBookingService.DAL.Models.State", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("TaxiBookingService.DAL.Models.Status", b =>
                {
                    b.Navigation("Rides");
                });

            modelBuilder.Entity("TaxiBookingService.DAL.Models.User", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("Drivers");
                });

            modelBuilder.Entity("TaxiBookingService.DAL.Models.Vehicle", b =>
                {
                    b.Navigation("Drivers");
                });

            modelBuilder.Entity("TaxiBookingService.DAL.Models.VehicleType", b =>
                {
                    b.Navigation("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
